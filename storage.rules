rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper function: Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function: Check if user is participant in conversation
    function isParticipant(conversationId) {
      return request.auth.uid in firestore.get(/databases/(default)/documents/conversations/$(conversationId)).data.participantIds;
    }
    
    // Image attachments: /images/{conversationId}/{messageId}/{filename}
    match /images/{conversationId}/{messageId}/{filename} {
      // Allow upload if authenticated and participant (with 2MB limit)
      allow write: if isAuthenticated() 
        && isParticipant(conversationId)
        && request.resource.size < 2 * 1024 * 1024;
      
      // Allow read if authenticated and participant
      allow read: if isAuthenticated() && isParticipant(conversationId);
    }
    
    // Document attachments: /documents/{conversationId}/{messageId}/{filename}
    match /documents/{conversationId}/{messageId}/{filename} {
      // Allow upload if authenticated and participant (with 10MB limit and PDF only)
      allow write: if isAuthenticated()
        && isParticipant(conversationId)
        && request.resource.size < 10 * 1024 * 1024
        && request.resource.contentType == 'application/pdf';

      // Allow read if authenticated and participant
      allow read: if isAuthenticated() && isParticipant(conversationId);
    }
    
    // Profile images: /profile-images/{userId}/{filename}
    match /profile-images/{userId}/{filename} {
      // Allow user to upload their own profile image
      allow write: if isAuthenticated() && request.auth.uid == userId;
      
      // Allow any authenticated user to read profile images
      allow read: if isAuthenticated();
    }
    
    // Default: deny all
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}

