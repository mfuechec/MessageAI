rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isParticipant(conversationData) {
      return isAuthenticated() && 
             request.auth.uid in conversationData.participantIds;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isUser(userId);
      allow update: if isUser(userId);
      allow delete: if false;  // No user deletion from client
    }
    
    // Conversations collection
    match /conversations/{conversationId} {
      allow read: if isParticipant(resource.data);
      allow create: if isAuthenticated() && 
                       request.auth.uid in request.resource.data.participantIds &&
                       request.resource.data.participantIds.size() <= 10;
      allow update: if isParticipant(resource.data);
      allow delete: if false;  // Use isArchived instead
    }
    
    // Messages collection
    match /messages/{messageId} {
      allow read: if isAuthenticated() && 
                     isParticipant(get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data);
      allow create: if isAuthenticated() && 
                       request.resource.data.senderId == request.auth.uid;
      
      // Allow sender to edit/delete their own messages
      allow update: if isAuthenticated() && 
                       resource.data.senderId == request.auth.uid;
      
      // Allow participants to mark messages as read (read receipts)
      allow update: if isAuthenticated() && 
                       isParticipant(get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data) &&
                       // Only allow updating read receipt fields
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['readBy', 'readCount', 'status', 'statusUpdatedAt']) &&
                       // Ensure they're adding themselves to readBy (not removing others)
                       request.auth.uid in request.resource.data.readBy;
      
      allow delete: if false;  // Use isDeleted flag instead
    }
    
    // Action items collection (for future AI features)
    match /actionItems/{itemId} {
      allow read: if isAuthenticated() && 
                     isParticipant(get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data);
      allow create, update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }
    
    // Decisions collection (for future AI features)
    match /decisions/{decisionId} {
      allow read: if isAuthenticated() && 
                     isParticipant(get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data);
      allow create, update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }
    
    // AI cache collection (managed by Cloud Functions)
    match /ai_cache/{cacheId} {
      allow read: if isAuthenticated();
      allow write: if false;  // Only Cloud Functions write to cache
    }
  }
}

